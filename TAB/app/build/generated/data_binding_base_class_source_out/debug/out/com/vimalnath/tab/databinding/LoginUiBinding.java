// Generated by view binder compiler. Do not edit!
package com.vimalnath.tab.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.vimalnath.tab.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LoginUiBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView forgotPass;

  @NonNull
  public final EditText logEmail;

  @NonNull
  public final EditText logPassword;

  @NonNull
  public final TextView register;

  @NonNull
  public final TextView signin;

  @NonNull
  public final MaterialButton signinbtn;

  private LoginUiBinding(@NonNull RelativeLayout rootView, @NonNull TextView forgotPass,
      @NonNull EditText logEmail, @NonNull EditText logPassword, @NonNull TextView register,
      @NonNull TextView signin, @NonNull MaterialButton signinbtn) {
    this.rootView = rootView;
    this.forgotPass = forgotPass;
    this.logEmail = logEmail;
    this.logPassword = logPassword;
    this.register = register;
    this.signin = signin;
    this.signinbtn = signinbtn;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LoginUiBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LoginUiBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.login_ui, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LoginUiBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.forgot_pass;
      TextView forgotPass = ViewBindings.findChildViewById(rootView, id);
      if (forgotPass == null) {
        break missingId;
      }

      id = R.id.log_email;
      EditText logEmail = ViewBindings.findChildViewById(rootView, id);
      if (logEmail == null) {
        break missingId;
      }

      id = R.id.log_password;
      EditText logPassword = ViewBindings.findChildViewById(rootView, id);
      if (logPassword == null) {
        break missingId;
      }

      id = R.id.register;
      TextView register = ViewBindings.findChildViewById(rootView, id);
      if (register == null) {
        break missingId;
      }

      id = R.id.signin;
      TextView signin = ViewBindings.findChildViewById(rootView, id);
      if (signin == null) {
        break missingId;
      }

      id = R.id.signinbtn;
      MaterialButton signinbtn = ViewBindings.findChildViewById(rootView, id);
      if (signinbtn == null) {
        break missingId;
      }

      return new LoginUiBinding((RelativeLayout) rootView, forgotPass, logEmail, logPassword,
          register, signin, signinbtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
